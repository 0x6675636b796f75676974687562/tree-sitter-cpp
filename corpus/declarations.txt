=========================================
Namespace definitions
=========================================

namespace std {

int x;

}  // namespace std

---

(translation_unit
  (namespace_definition
    (identifier)
    (declaration_list
      (declaration (identifier) (identifier))))
  (comment))

=========================================
Using declarations
=========================================

using a;
using ::b;
using c::d;
using ::e::f::g;

---

(translation_unit
  (using_declaration (identifier))
  (using_declaration (scoped_identifier (identifier)))
  (using_declaration (scoped_identifier (identifier) (identifier)))
  (using_declaration
    (scoped_identifier
      (scoped_identifier (scoped_identifier (identifier)) (identifier))
      (identifier))))

=========================================
Reference declarations
=========================================

int main() {
  T &x = y<T &>();
}

---

(translation_unit
  (function_definition
    (identifier)
    (function_declarator (identifier))
    (compound_statement
      (declaration
        (identifier)
        (init_declarator
          (reference_declarator (identifier))
          (call_expression
            (template_call (identifier) (type_name (identifier) (abstract_reference_declarator)))
            (argument_list)))))))

=========================================
Operator overload declarations
=========================================

ostream &operator<<(ostream &, const A &a);

bool A::operator!=(const A &other) const;

---

(translation_unit
  (declaration
    (identifier)
    (reference_declarator
      (function_declarator
        (operator_name)
        (parameter_type_list
          (parameter_declaration (identifier) (abstract_reference_declarator))
          (parameter_declaration (type_qualifier) (identifier) (reference_declarator (identifier)))))))
  (declaration
    (identifier)
    (function_declarator
      (scoped_identifier (identifier) (operator_name))
      (parameter_type_list
        (parameter_declaration (type_qualifier) (identifier) (reference_declarator (identifier))))
      (type_qualifier))))

=========================================
Template declarations
=========================================

template <typename T>
void foo(T &t);

template <typename T, int u>
int bar(T &t) { return u; }

---

(translation_unit
  (template_declaration
    (template_parameter_list
      (type_parameter_declaration (identifier)))
    (declaration
      (identifier)
      (function_declarator
        (identifier)
        (parameter_type_list (parameter_declaration (identifier) (reference_declarator (identifier)))))))
  (template_declaration
    (template_parameter_list
      (type_parameter_declaration (identifier))
      (parameter_declaration (identifier) (identifier)))
    (function_definition
      (identifier)
      (function_declarator
        (identifier)
        (parameter_type_list (parameter_declaration (identifier) (reference_declarator (identifier)))))
      (compound_statement (return_statement (identifier))))))

=========================================
Template specializations
=========================================

template <>
void foo<T>(T &t);

---

(translation_unit
  (template_declaration
    (template_parameter_list)
    (declaration
      (identifier)
      (function_declarator
        (template_call (identifier) (type_name (identifier)))
        (parameter_type_list (parameter_declaration (identifier) (reference_declarator (identifier))))))))
